# -*- coding: utf-8 -*-
"""StockPricePredictor v4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYLfCGff5plzIogSN3aCyVy51F7W1kgp
"""

import math
import pandas as pd
import numpy as np
import yfinance as yf
import streamlit as st
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
import matplotlib.pyplot as plt
from datetime import date

plt.style.use('fivethirtyeight')

# Streamlit app
st.title('Stock Price Prediction')

# Input for stock ticker
stock_ticker = st.text_input('Enter Stock Ticker (e.g. AAPL)', 'AAPL')

# Date range for the stock data
start_date = st.date_input('Start Date', date(2016, 1, 1))
end_date = st.date_input('End Date', date.today())

if st.button('Predict'):
    # Fetch stock data
    df = yf.download(stock_ticker, start=start_date, end=end_date)

    # Filter the data to keep only the 'Close' column
    data = df.filter(['Close'])
    dataset = data.values
    training_data_len = math.ceil(len(dataset) * 0.8)

    # Scale the data
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(dataset)

    # Create the training data set
    train_data = scaled_data[0:training_data_len, :]
    x_train = []
    y_train = []

    for i in range(60, len(train_data)):
        x_train.append(train_data[i-60:i, 0])
        y_train.append(train_data[i, 0])

    x_train, y_train = np.array(x_train), np.array(y_train)

    # Reshape the data
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

    # Build the LSTM model
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
    model.add(Dropout(0.2))  # Add dropout layer to prevent overfitting
    model.add(LSTM(50, return_sequences=False))
    model.add(Dropout(0.2))  # Add dropout layer to prevent overfitting
    model.add(Dense(25))
    model.add(Dense(1))

    # Compile the model
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train the model
    model.fit(x_train, y_train, batch_size=1, epochs=10)  # Increase the number of epochs

    # Create the testing data set
    test_data = scaled_data[training_data_len - 60:, :]
    x_test = []
    y_test = dataset[training_data_len:, :]
    for i in range(60, len(test_data)):
        x_test.append(test_data[i-60:i, 0])

    x_test = np.array(x_test)
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

    # Get the model's predicted price values
    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)

    # Create a new DataFrame for the prediction
    new_df = data.copy()
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(new_df)

    def predict_next_day(data, model, scaler):
        last_60_days = data[-60:]
        last_60_days_scaled = scaler.transform(last_60_days)
        X_test = []
        X_test.append(last_60_days_scaled)
        X_test = np.array(X_test)
        X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
        pred_price = model.predict(X_test)
        pred_price = scaler.inverse_transform(pred_price)
        return pred_price[0][0]

    N = 30
    future_dates = pd.date_range(start=end_date, periods=N, freq='B')

    future_predictions = []

    for date in future_dates:
        next_pred = predict_next_day(new_df.values, model, scaler)
        new_df.loc[date] = [next_pred]
        future_predictions.append(next_pred)

    # Plot the results
    plt.figure(figsize=(14, 7))
    plt.plot(new_df.index, new_df['Close'], label='Historical Data')
    plt.plot(future_dates, future_predictions, label='Predicted Prices', linestyle='--', color='red')
    plt.title(f'Stock Prices Prediction for {stock_ticker}')
    plt.xlabel('Date')
    plt.ylabel('Stock Price (USD)')
    plt.legend()
    st.pyplot(plt)

    # Display the final prediction
    final_prediction = future_predictions[-1]
    st.write(f"Predicted close price for {future_dates[-1].date()}: ${final_prediction:.2f}")
